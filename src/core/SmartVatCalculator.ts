// src/core/SmartVatCalculator.ts
import {
  calculateField4,
  calculateField8,
  calculateField61,
  calculateField67,
  calculateField66,
  calculateField62,
  calculateField83,
  calculateProfit
} from '../units/vatCalculations'

// –¢–∏–ø—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–æ–≤
export interface VatCalculationResult {
  field83: number
  field66: number
  field62: number
  field67: number
  field61: number
  field4: number
  field8: number
  plannedProfit: number
}

export interface VatData {
  field10: number
  field40a: number
  field40b: number
  field41: number
  field43: number
  field4: number
  field81a: number
  field81b: number
  field89a: number
  field89b: number
  field8: number
  field66: number
  field61: number
  field67: number
  field62: number
  field83: number
  plannedProfit: number
}

export interface CompanyData {
  name: string
  address: string
  hrb: string
  steuernummer: string
}

export interface ExportData {
  company: CompanyData
  period: string
  timestamp: string
  software: string
  data: VatData
  calculations: VatCalculationResult
}

export default class SmartVatCalculator {
  private vatRate19: number = 0.19 // Mehrwertsteuersatz 19%
  private initialized: boolean = false
  private data: VatData

  constructor() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    this.data = {
      field10: 0,
      field40a: 0,
      field40b: 0,
      field41: 0,
      field43: 0,
      field4: 0,
      field81a: 0,
      field81b: 0,
      field89a: 0,
      field89b: 0,
      field8: 0,
      field66: 0,
      field61: 0,
      field67: 0,
      field62: 0,
      field83: 0,
      plannedProfit: 0
    }
  }

  init(): void {
    if (this.initialized) return
    
    this.loadDefaultData()
    this.initialized = true
    console.log('üöÄ SmartVat Calculator initialized - Modular Architecture Style')
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π
  setFieldValue(fieldId: keyof VatData, value: number): void {
    this.data[fieldId] = value
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π
  getFieldValue(fieldId: keyof VatData): number {
    return this.data[fieldId] || 0
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—è –∏ –ø–µ—Ä–µ—Å—á–µ—Ç
  updateField(fieldId: keyof VatData, value: number): VatCalculationResult {
    this.setFieldValue(fieldId, value)
    return this.calculateAllFields()
  }

  calculateAllFields(): VatCalculationResult {
    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π
    const field40a = this.getFieldValue('field40a')
    const field40b = this.getFieldValue('field40b')
    const field41 = this.getFieldValue('field41')
    const field43 = this.getFieldValue('field43')
    const field81a = this.getFieldValue('field81a')
    const field81b = this.getFieldValue('field81b')
    const field89a = this.getFieldValue('field89a')
    const field89b = this.getFieldValue('field89b')

    // –†–∞—Å—á—ë—Ç—ã —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const field4 = calculateField4(field40a, field40b, field41, field43)
    const field8 = calculateField8(field81a, field81b, field89a, field89b)
    const field61 = calculateField61(field89a, this.vatRate19)
    const field67 = calculateField67(field89b, this.vatRate19)
    const field66 = calculateField66(field81a, this.vatRate19)
    const field62 = calculateField62(field66, field61, field67)
    const field83 = calculateField83(field66, field61, field67, field62)
    const plannedProfit = calculateProfit(field4, field8)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ data
    this.setFieldValue('field4', field4)
    this.setFieldValue('field8', field8)
    this.setFieldValue('field61', field61)
    this.setFieldValue('field67', field67)
    this.setFieldValue('field66', field66)
    this.setFieldValue('field62', field62)
    this.setFieldValue('field83', field83)
    this.setFieldValue('plannedProfit', plannedProfit)

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    this.updateProfitDisplay(field83, plannedProfit)

    console.log('[üîÅ –†–∞—Å—á–µ—Ç —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏]', {
      field4, field8, field66, field61, field62, field83, plannedProfit
    })

    return { 
      field83, 
      field66, 
      field62, 
      field67, 
      field61, 
      field4, 
      field8, 
      plannedProfit 
    }
  }

  updateProfitDisplay(field83: number, plannedProfit: number): void {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –≤ React –º—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º DOM –Ω–∞–ø—Ä—è–º—É—é
    console.log(`üí∏ Field83: ${field83.toFixed(2)}‚Ç¨, üìà Profit: ${plannedProfit.toFixed(2)}‚Ç¨`)
  }

  loadDefaultData(): void {
    const defaultData: Partial<VatData> = {
      field10: 0,
      field40a: 18400.00,
      field40b: 0.00,
      field41: 0.00,
      field43: 0.00,
      field4: 18400.00,
      field81a: 133.56, // –í–µ—Å—å –ù–î–° –ø–æ –ø–æ–∫—É–ø–∫–µ –≤ –ì–µ—Ä–º–∞–Ω–∏–∏
      field81b: 0, // –≠—Ç–æ —É –Ω–∞—Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —É—Å–ª—É–≥ –≤–Ω—É—Ç—Ä–∏ –ì–µ—Ä–º–∞–Ω–∏–∏ –±–µ–∑ –ù–î–° –∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä –±–µ–∑ –ù–î–°
      field89a: 15755.00, // –≠—Ç–æ —É –Ω–∞—Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –ï–≤—Ä–æ—Å–æ—é–∑–∞ –ø–æ –Ω—É–ª–µ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –ù–î–° –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Å—Ç—Ä–æ–∫–µ 61
      field89b: 484.96, // –æ–ø–ª–∞—Ç–∞ –ø–æ—à–ª–∏–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ 
      field83: 0.00, // —ç—Ç–æ —É –Ω–∞—Å
      field8: 16373.52, // 133,56+15755+484,96
      field66: 25.38, // —Å—É–º–º–∞ –ù–î–°  
      field61: 3085.59, // (15755+484.96)*19/100=3085,59
      field67: 0,
      field62: 3110.97 // 25,38+3085,59+0=3110,97
    }

    Object.entries(defaultData).forEach(([fieldId, value]) => {
      this.setFieldValue(fieldId as keyof VatData, value as number)
    })

    this.calculateAllFields()
    console.log('üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–æ—á–Ω–æ –ø–æ –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ')
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  getAllData(): VatData {
    return { ...this.data }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  setAllData(newData: Partial<VatData>): VatCalculationResult {
    Object.entries(newData).forEach(([fieldId, value]) => {
      if (value !== undefined) {
        this.setFieldValue(fieldId as keyof VatData, value as number)
      }
    })
    return this.calculateAllFields()
  }

  exportData(): ExportData {
    return {
      company: {
        name: 'ASSET LOGISTICS GMBH',
        address: 'Kurze Stra√üe 6, 06366 K√∂then',
        hrb: '34481',
        steuernummer: 'DE453202061'
      },
      period: 'M√§rz 2025',
      timestamp: new Date().toISOString(),
      software: 'IT AI SOLAR Dashka SmartStb v2.0.1',
      data: this.getAllData(),
      calculations: this.calculateAllFields()
    }
  }

  // –ê–ª–∏–∞—Å—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  calculateTax(): VatCalculationResult {
    return this.calculateAllFields()
  }

  updateTotal81(): VatCalculationResult {
    return this.calculateAllFields()
  }

  updateTotal41(): VatCalculationResult {
    return this.calculateAllFields()
  }
}